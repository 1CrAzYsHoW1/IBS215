class Dictionary:

    def __init__(self, words: list):
        self.words = words

    def __levenshtein(self, term_1: str, term_2: str) -> int:
        """ Implementation of Levenshtein distance function; """
        n, m = len(term_1), len(term_2)
        if n > m:
            term_1, term_2, n, m = term_2, term_1, m, n

        current_row = range(n + 1) 
        for i in range(1, m + 1):
            previous_row, current_row = current_row, [i] + [0] * n
            for j in range(1, n + 1):
                add, delete, change = previous_row[j] + 1, current_row[j - 1] + 1, previous_row[j - 1]
                if term_1[j - 1] != term_2[i - 1]:
                    change += 1
                current_row[j] = min(add, delete, change)

        return current_row[n]

    def find_most_similar(self, term: str) -> str:
        """ Finds the most similar word in given collection using Levenshtein distance metric; """
        levenstein_distances = {num: self.__levenshtein(word, term) for num, word in enumerate(self.words)}
        minimal_index = min(levenstein_distances.items(), key = lambda x: x[1])
        return self.words[minimal_index[0]]
